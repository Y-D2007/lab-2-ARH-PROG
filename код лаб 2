        }
        std::cout << "Копирующий конструктор matr " << num << " вызван." << std::endl;
    }

    ~matr() {
        for (int i = 0; i < rows; ++i) delete[] m[i];
        delete[] m;
        std::cout << "Деструктор matr " << num << " вызван." << std::endl;
    }

    matr operator+(const matr& mat) const {
        if (rows != mat.rows || cols != mat.cols)
            throw std::invalid_argument("Размерности матриц не совпадают.");
        
        matr result(rows, cols);
        for (int i = 0; i < rows; ++i)
            for (int j = 0; j < cols; ++j)
                result.m[i][j] = m[i][j] + mat.m[i][j];

        std::cout << "Сложение matr " << num << " с matr " << mat.num << " выполнено." << std::endl;
        return result;
    }

    matr operator-(const matr& mat) const {
        if (rows != mat.rows || cols != mat.cols)
            throw std::invalid_argument("Размерности матриц не совпадают.");
        
        matr result(rows, cols);
        for (int i = 0; i < rows; ++i)
            for (int j = 0; j < cols; ++j)
                result.m[i][j] = m[i][j] - mat.m[i][j];

        std::cout << "Вычитание matr " << num << " из matr " << mat.num << " выполнено." << std::endl;
        return result;
    }

    matr operator*(double k) const {
        matr result(rows, cols);
        for (int i = 0; i < rows; ++i)
            for (int j = 0; j < cols; ++j)
                result.m[i][j] = k * m[i][j];

        std::cout << "Умножение matr " << num << " на скаляр " << k << " выполнено." << std::endl;
        return result;
    }

    matr& operator=(const matr& mat) {
        if (this == &mat) return *this;

        for (int i = 0; i < rows; ++i) delete[] m[i];
        delete[] m;

        rows = mat.rows;
        cols = mat.cols;

        m = new double*[rows];
        for (int i = 0; i < rows; ++i) {
            m[i] = new double[cols];
            std::copy(mat.m[i], mat.m[i] + cols, m[i]);
        }

        std::cout << "Присваивание matr " << num << " от matr " << mat.num << " выполнено." << std::endl;
        
        return *this;
    }

    double& operator()(int row, int col) {
        if (row < 0 || row >= rows || col < 0 || col >= cols)
            throw std::out_of_range("Индекс вне диапазона.");
        return m[row][col];
    }

    const double& operator()(int row, int col) const {
        if (row < 0 || row >= rows || col < 0 || col >= cols)
            throw std::out_of_range("Индекс вне диапазона.");
        return m[row][col];
    }

    void print() const {
        std::cout << "matr " << num << ":" << std::endl;
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                std::cout << m[i][j] << (j < cols - 1 ? ", " : "");
            }
            std::cout << std::endl;
        }
    }
    
    static int getCount() { return count; }
};

int matr::count = 0;

int main() {
    // Пример использования классов
    vect v1(3);
    v1[0] = 1.0;
    v1[1] = 2.0;
    v1[2] = 3.0;

    vect v2(3);
    v2[0] = 4.0;
    v2[1] = 5.0;
    v2[2] = 6.0;

    vect v3 = v1 + v2;
    v3.print();

    matr m1(2, 2);
    m1(0, 0) = 1.0;
    m1(0, 1) = 2.0;
    m1(1, 0) = 3.0;
    m1(1, 1) = 4.0;

    matr m2(2, 2);
    m2(0, 0) = 5.0;
    m2(0, 1) = 6.0;
    m2(1, 0) = 7.0;
    m2(1, 1) = 8.0;

    matr m3 = m1 + m2;
    m3.print();

    return 0;
}
