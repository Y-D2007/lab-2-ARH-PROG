#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

// Абстрактный класс Точка
class Point {
protected:
    double x, y;
public:
    Point(double x = 0, double y = 0) : x(x), y(y) {}
    
    // Чисто виртуальные методы, делающие класс абстрактным
    virtual void draw() = 0;
    virtual void erase() = 0;
    
    void move(double dx, double dy) {
        x += dx;
        y += dy;
    }
    
    virtual void rotate(double angle) = 0;
    
    virtual ~Point() {}
    
    double getX() const { return x; }
    double getY() const { return y; }
    
    void setX(double newX) { x = newX; }
    void setY(double newY) { y = newY; }
};

// Класс Линия
class Line : public Point {
protected:
    double x2, y2;
public:
    Line(double x1, double y1, double x2, double y2) : Point(x1, y1), x2(x2), y2(y2) {}
    
    void draw() override {
        cout << "Drawing line from (" << x << "," << y << ") to (" << x2 << "," << y2 << ")\n";
    }
    
    void erase() override {
        cout << "Erasing line from (" << x << "," << y << ") to (" << x2 << "," << y2 << ")\n";
    }
    
    void rotate(double angle) override {
        // Поворот первой точки относительно (0,0)
        double newX = x * cos(angle) - y * sin(angle);
        double newY = x * sin(angle) + y * cos(angle);
        x = newX;
        y = newY;
        
        // Поворот второй точки относительно (0,0)
        newX = x2 * cos(angle) - y2 * sin(angle);
        newY = x2 * sin(angle) + y2 * cos(angle);
        x2 = newX;
        y2 = newY;
    }
    
    void move(double dx, double dy) {
        Point::move(dx, dy);
        x2 += dx;
        y2 += dy;
    }
};

// Базовый класс для квадрата (виртуальное наследование)
class SquareBase : virtual public Point {
protected:
    double side;
public:
    SquareBase(double x, double y, double side) : Point(x, y), side(side) {}
    
    void draw() override {
        cout << "Drawing square at (" << x << "," << y << ") with side " << side << "\n";
    }
    
    void erase() override {
        cout << "Erasing square at (" << x << "," << y << ") with side " << side << "\n";
    }
    
    void rotate(double angle) override {
        cout << "Rotating square by " << angle << " radians\n";
    }
    
    double getSide() const { return side; }
};

// Класс Квадрат
class Square : public SquareBase {
public:
    Square(double x, double y, double side) : SquareBase(x, y, side) {}
};

// Класс Ромб
class Rhombus : public SquareBase {
protected:
    double angle;
public:
    Rhombus(double x, double y, double side, double angle) 
        : SquareBase(x, y, side), angle(angle) {}
    
    void draw() override {
        cout << "Drawing rhombus at (" << x << "," << y << ") with side " << side 
             << " and angle " << angle << "\n";
    }
    
    void erase() override {
        cout << "Erasing rhombus at (" << x << "," << y << ") with side " << side 
             << " and angle " << angle << "\n";
    }
};

// Класс Прямоугольник
class Rectangle : public SquareBase {
protected:
    double height;
public:
    Rectangle(double x, double y, double width, double height) 
        : SquareBase(x, y, width), height(height) {}
    
    void draw() override {
        cout << "Drawing rectangle at (" << x << "," << y << ") with width " << side 
             << " and height " << height << "\n";
    }
    
    void erase() override {
        cout << "Erasing rectangle at (" << x << "," << y << ") with width " << side 
             << " and height " << height << "\n";
    }
};

// Класс Параллелограмм (наследуется от SquareBase виртуально)
class Parallelogram : virtual public SquareBase {
protected:
    double height;
    double angle;
public:
    Parallelogram(double x, double y, double side, double height, double angle)
: SquareBase(x, y, side), height(height), angle(angle) {}
    
    void draw() override {
        cout << "Drawing parallelogram at (" << x << "," << y << ") with side " << side 
             << ", height " << height << " and angle " << angle << "\n";
    }
    
    void erase() override {
        cout << "Erasing parallelogram at (" << x << "," << y << ") with side " << side 
             << ", height " << height << " and angle " << angle << "\n";
    }
    
    void rotate(double angle) override {
        this->angle += angle;
        cout << "Rotated parallelogram by " << angle << " radians. New angle: " << this->angle << "\n";
    }
};

// Функция для демонстрации позднего связывания
void demonstrateLateBinding(Point* obj) {
    obj->draw();
    obj->rotate(1.57); // Поворот на ~90 градусов
    obj->move(10, 10);
    obj->draw();
    obj->erase();
}

int main() {
    // Создание объектов
    Line line(0, 0, 10, 10);
    Square square(5, 5, 10);
    Rhombus rhombus(3, 3, 8, 0.78);
    Rectangle rectangle(2, 2, 6, 4);
    Parallelogram parallelogram(1, 1, 5, 3, 0.52);
    
    // Вектор указателей на базовый класс
    vector<Point*> shapes;
    shapes.push_back(&line);
    shapes.push_back(&square);
    shapes.push_back(&rhombus);
    shapes.push_back(&rectangle);
    shapes.push_back(&parallelogram);
    
    // Демонстрация работы с объектами
    for (auto shape : shapes) {
        demonstrateLateBinding(shape);
        cout << "-----------------\n";
    }
    
    // Демонстрация различных вариантов доступа
    SquareBase* sq = &square;
    cout << "Square side: " << sq->getSide() << "\n";
    // sq->x = 10; // Ошибка: x защищенный член
    
    return 0;
}
